package com.example.android.hilt.di.module

import android.content.Context
import androidx.room.Room
import com.example.android.hilt.data.AppDatabase
import com.example.android.hilt.data.LogDao
import dagger.Module
import dagger.Provides
import dagger.hilt.InstallIn
import dagger.hilt.android.components.ApplicationComponent
import dagger.hilt.android.qualifiers.ApplicationContext
import javax.inject.Singleton


/**
 * Module with bindings information for LogDao and AppDatabase.
 *
 * Since LoggerLocalDataSource is scoped to the application container,
 * the LogDao binding needs to be available in the application container
 * hence annotation @InstallIn(ApplicationComponent::class).
 *
 * In Kotlin, modules that only contain @Provides functions can be object classes.
 */

@InstallIn(ApplicationComponent::class)
@Module
object DatabaseModule{

    /**
     * To provide an instance of LogDao we have a transitive dependency on the AppDatabase.
     * We use @Provides annotation for the function, which return type of, tells Hilt the binding's
     * type and the function parameters are the dependencies of the type.
     */
    @Provides
    fun provideLogDao(db: AppDatabase): LogDao{
        return  db.logDao()
    }

    /**
     * Since AppDatabase is another class that our project doesn't own because it's
     * generated by Room, we can also provide it using an @Provides function.
     *
     * Since we always want Hilt to provide the same database instance,
     * we annotate the method with @Singleton.
     *
     * To access context, you need to annotate the field with @ApplicationContext.
     */

    @Provides
    @Singleton
    fun provideDatabase(@ApplicationContext appContext: Context): AppDatabase{
        return Room.databaseBuilder(
            appContext,
            AppDatabase::class.java,
            "logging.db"
        ).build()
    }

}